//
//  VIClient.h
//  VoxSDK
//
//  Created by Andrey Syvrachev (asyvrachev@zingaya.com) on 07.12.16.
//  Copyright Â© 2017 VoxImplant (www.voximplant.com). All rights reserved.
//

#import <Foundation/Foundation.h>
#import <CoreGraphics/CoreGraphics.h>

@class VIClient;
@class VICall;

/**
@enum VILogLevel
@abstract Log level
@constant VILogLevelDisabled Log verbosity level to disable logs.
@constant VILogLevelError Log verbosity level to include only error messages.
@constant VILogLevelWarning Log verbosity level to include warnings messages.
@constant VILogLevelInfo Log verbosity level to include info messages.
@constant VILogLevelDebug Log verbosity level to include debug messages.
@constant VILogLevelVerbose Log verbosity level to include verbose messages.
@constant VILogLevelMax Log verbosity level to include all types of messages.
*/
typedef NS_ENUM(NSUInteger, VILogLevel) {
    VILogLevelDisabled,
    VILogLevelError,
    VILogLevelWarning,
    VILogLevelInfo,
    VILogLevelDebug,
    VILogLevelVerbose,
    VILogLevelMax
};

<<<<<<< HEAD
/*!
 Main VoxImplant SDK class.
 @class VIClient
 */
=======
/** Interface that may be used to connect and login to VoxImplant Cloud, make and receive audio/video calls. */
>>>>>>> feature/ios-2.7.0
@interface VIClient : NSObject

/**
Get client version
@method clientVersion
@static
@return {NSString*} client version
*/
+ (NSString*)clientVersion;

/**
<<<<<<< HEAD
Set a verbosity level for log messages. This method must be called before creating SDK object instance.
@method setLogLevel:
@static
@param {enum VILogLevel} logLevel Log verbosity level
*/
+ (void)setLogLevel:(VILogLevel)logLevel;

/*!
 Enables save logs to file. Log files located at: Library/Caches/Logs
=======
 Set a verbosity level for log messages. This method must be called before creating SDK object instance.
 
 @param logLevel <VILogLevel> log verbosity level
 */
+ (void)setLogLevel:(VILogLevel)logLevel;

/**
 Enable saving of the logs to file. Log files located at: Library/Caches/Logs
>>>>>>> feature/ios-2.7.0
 This method must be called before creating SDK object instance.
 */
+(void) saveLogToFileEnable;

<<<<<<< HEAD
/**
Create VIClient instance
@method initWithDelegateQueue:
@param {dispatch_queue_t} queue All delegates methods will be called in this queue. Queue should be serial, but not concurrent (main queue is applicable).
*/
- (instancetype)initWithDelegateQueue:(dispatch_queue_t)queue;

@end

/**
@protocol VIClientSessionDelegate
@abstract Delegate for VIClient
@discussion Delegate for VIClient to handle connection with VoxImplant Cloud events.
*/
@protocol VIClientSessionDelegate <NSObject>

/**
Triggered after connection to VoxImplant Cloud was established successfully.
@method clientSessionDidConnect:
@param {VIClient*} client VIClient instance
*/
- (void)clientSessionDidConnect:(VIClient*)client;

/**
Triggered if connection to VoxImplant Cloud was closed
@method clientSessionDidDisconnect:
@param {VIClient*} client VIClient instance
*/
- (void)clientSessionDidDisconnect:(VIClient*)client;

/**
Triggered if connection to VoxImplant Cloud couldn't be established
@method client:sessionDidFailConnectWithError:
@param {VIClient*} client VIClient instance
@param {NSError*} error Error description
*/
=======
/**
 @warning NS_UNAVAILABLE
 */
-(instancetype)init NS_UNAVAILABLE;

/**
 Initialize VIClient instance
 
 @param queue All delegates methods will be called in this queue. Queue should be serial, but not concurrent (main queue is applicable).
 */
- (instancetype)initWithDelegateQueue:(dispatch_queue_t)queue;

/**
 Get instance of messaging subsystem.
 */
@property(nonatomic,strong,readonly) VIMessenger *messenger;

@end

/**
 Delegate that may be used to handle events for connection with VoxImplant Cloud. 
 */
@protocol VIClientSessionDelegate <NSObject>

/**
 Triggered after connection to VoxImplant Cloud was established successfully.
 
 @param client <VIClient> instance
 */
- (void)clientSessionDidConnect:(VIClient*)client;

/**
 Triggered if connection to VoxImplant Cloud was closed
 
 @param client <VIClient> instance
 */
- (void)clientSessionDidDisconnect:(VIClient*)client;

/**
 Triggered if connection to VoxImplant Cloud couldn't be established
 
 @param client <VIClient> instance
 @param error  Error description
 */
>>>>>>> feature/ios-2.7.0
- (void)client:(VIClient*)client sessionDidFailConnectWithError:(NSError*)error;

@end

@interface VIClient(Session)

/**
Session delegate that handles events for connection with VoxImplant Cloud.
@property sessionDelegate
@type {id<VIClientSessionDelegate>}
*/
@property (nonatomic, weak) id<VIClientSessionDelegate> sessionDelegate;

/**
Connect to VoxImplant cloud
@method connect
*/
- (void)connect;

/**
<<<<<<< HEAD
Connect to VoxImplant cloud.
@method connectWithConnectivityCheck:gateways:
@param {BOOL} connectivityCheck Checks whether UDP traffic will flow correctly between device and VoxImplant cloud. This check reduces connection speed.
@param {NSArray*} gateways Array of server names of particular media gateways for connection
*/
=======
 Connect to VoxImplant cloud.
 
 @param connectivityCheck Checks whether UDP traffic will flow correctly between device and VoxImplant cloud. This check reduces connection speed.
 @param gateways          Array of server names of particular media gateways for connection
 */
>>>>>>> feature/ios-2.7.0
- (void)connectWithConnectivityCheck:(BOOL)connectivityCheck gateways:(NSArray*)gateways;

/**
Disconnect from VoxImplant cloud
@method disconnect
*/
- (void)disconnect;

@end

/**
<<<<<<< HEAD
Completion handler, triggered when login operation is completed successfully.
@param {NSString *} displayName  Display name of logged in user
@param {NSDictionary*} authParams Auth parameters that can be used to login using access token.
*/
=======
 Completion handler, triggered when login operation is completed successfully.
 
 @param displayName Display name of logged in user
 @param authParams  Auth parameters that can be used to login using access token.
 */
>>>>>>> feature/ios-2.7.0
typedef void (^VILoginSuccess)(NSString * displayName, NSDictionary* authParams);

/**
Completion handler, triggered when login process failed.
@param {NSError *} error  Error
*/
typedef void (^VILoginFailure)(NSError * error);

/**
Completion handler, triggered when one time key generated by the login server.
@param {NSString *} oneTimeKey  One time key
*/
typedef void (^VIOneTimeKeyResult)(NSString * oneTimeKey);

/**
<<<<<<< HEAD
Completion handler, triggered when refresh of login tokens completed.
@param {NSError *} error Error if operation failed, nil otherwise
@param {NSDictionary*} authParams Auth parameters that can be used to login using access token.
*/
=======
 Completion handler, triggered when refresh of login tokens completed.
 
 @param error      Error if operation failed, nil otherwise
 @param authParams Auth parameters that can be used to login using access token
 */
>>>>>>> feature/ios-2.7.0
typedef void (^VIRefreshTokenResult)(NSError *error, NSDictionary* authParams);


@interface VIClient(Login)

/**
<<<<<<< HEAD
Login to VoxImplant cloud using password.
@method loginWithUser:password:success:failure:
@param {NSString*} user Full user name, including app and account name, like <i>someuser@someapp.youraccount.voximplant.com</i>
@param {NSString*} password User password
@param {VILoginSuccess} success Completion handler triggered if operation is completed successfully
@param {VILoginFailure} failure Completion handler failure triggered if operation is failed
*/
=======
 Login to VoxImplant cloud using password.
 
 @param user     Full user name, including app and account name, like _someuser@someapp.youraccount.voximplant.com_
 @param password User password
 @param success  <VILoginSuccess> completion handler triggered if operation is completed successfully
 @param failure  <VILoginFailure> completion handler failure triggered if operation is failed
 */
>>>>>>> feature/ios-2.7.0
- (void)loginWithUser:(NSString*)user
             password:(NSString*)password
              success:(VILoginSuccess)success
              failure:(VILoginFailure)failure;

/**
<<<<<<< HEAD
Login to VoxImplant cloud using access token.
@method loginWithUser:token:success:failure:
@param {NSString*} user  Full user name, including app and account name, like <i>someuser@someapp.youraccount.voximplant.com</i>
@param {NSString*} token Access token obtained from authParams
@param {VILoginSuccess} success Completion handler triggered if operation is completed successfully
@param {VILoginFailure} failure Completion handler failure triggered if operation is failed
*/
=======
 Login to VoxImplant cloud using access token.
 
 @param user    Full user name, including app and account name, like _someuser@someapp.youraccount.voximplant.com_
 @param token   Access token obtained from authParams
 @param success <VILoginSuccess> completion handler triggered if operation is completed successfully
 @param failure <VILoginFailure> completion handler failure triggered if operation is failed
 */
>>>>>>> feature/ios-2.7.0
- (void)loginWithUser:(NSString*)user
                token:(NSString*)token
              success:(VILoginSuccess)success
              failure:(VILoginFailure)failure;

/**
<<<<<<< HEAD
Login to VoxImplant cloud using one time key.
@method loginWithUser:oneTimeKey:success:failure:
@param {NSString*} user Full user name, including app and account name, like <i>someuser@someapp.youraccount.voximplant.com</i>
@param {NSString*} oneTimeKey Hash that was generated using following formula: <i>MD5(oneTimeKey+"|"+MD5(user+":voximplant.com:"+password))</i><br><b>Please note that here user is just a user name, without app name, account name or anything else after "@"</b>. So if you pass <i>myuser@myapp.myacc.voximplant.com</i> as a <b>username</b>, you should only use <i>myuser</i> while computing this hash
@param {VILoginSuccess} success Completion handler triggered if operation is completed successfully
@param {VILoginFailure} failure Completion handler failure triggered if operation is failed
*/
=======
 Login to VoxImplant cloud using one time key.
 
 @param user       Full user name, including app and account name, like _someuser@someapp.youraccount.voximplant.com_
 @param oneTimeKey Hash that was generated using following formula: 
 
     MD5(oneTimeKey+"|"+MD5(user+":voximplant.com:"+password))
 
 **Please note that here user is just a user name, without app name, account name or anything else after "@".**
 So if you pass _myuser@myapp.myacc.voximplant.com_ as a *username*, you should only use _myuser_ while computing this hash
 
 @param success    <VILoginSuccess> completion handler triggered if operation is completed successfully
 @param failure    <VILoginFailure> completion handler failure triggered if operation is failed
 */
>>>>>>> feature/ios-2.7.0
- (void)loginWithUser:(NSString*)user
           oneTimeKey:(NSString*)oneTimeKey
              success:(VILoginSuccess)success
              failure:(VILoginFailure)failure;

/**
<<<<<<< HEAD
Perform refresh of login tokens required for login using access token
@method refreshTokenWithUser:token:result:
@param {NSString*} user Full user name, including app and account name, like <i>someuser@someapp.youraccount.voximplant.com</i>
@param {NSString*} token Refresh token obtained from authParams
@param {VIRefreshTokenResult} result Completion handler that is triggered when the operation is completed
*/
- (void)refreshTokenWithUser:(NSString *)user token:(NSString*)token result:(VIRefreshTokenResult)result;

/**
Generates one time login key to be used for automated login process. See <a href="http://voximplant.com/docs/quickstart/24/automated-login/">Information about automated login on VoxImplant website</a> and <b>loginUsingOneTimeKey</b>
@method requestOneTimeKeyWithUser:result:
@param {NSString*} user Full user name, including app and account name, like <i>someuser@someapp.youraccount.voximplant.com</i>
@param {VIOneTimeKeyResult} result Completion handler that is triggered when the operation is completed
*/
=======
 Perform refresh of login tokens required for login using access token
 
 @param user   Full user name, including app and account name, like _someuser@someapp.youraccount.voximplant.com_
 @param token  Refresh token obtained from authParams
 @param result <VIRefreshTokenResult> completion handler that is triggered when the operation is completed
 */
- (void)refreshTokenWithUser:(NSString *)user token:(NSString*)token result:(VIRefreshTokenResult)result;

/**
 Generates one time login key to be used for automated login process.
 
 @param user   Full user name, including app and account name, like _someuser@someapp.youraccount.voximplant.com_
 @param result <VIOneTimeKeyResult> completion handler that is triggered when the operation is completed
 @see -loginWithUser:oneTimeKey:success:failure:
 @see [Information about automated login on VoxImplant website](http://voximplant.com/docs/quickstart/24/automated-login/)
 */
>>>>>>> feature/ios-2.7.0
- (void)requestOneTimeKeyWithUser:(NSString *)user result:(VIOneTimeKeyResult)result;

@end

<<<<<<< HEAD
/**
@protocol VIClientCallManagerDelegate
@abstract Delegate for VIClient
@discussion Delegate for VIClient to handle incoming calls.
*/
@protocol VIClientCallManagerDelegate <NSObject>

/**
Triggered on incoming call
@method client:didReceiveIncomingCall:video:headers:
@param {VIClient*} client VIClient instance
@param {VICall*} call Call instance
@param {BOOL} video True if incoming call offers video, false otherwise
@param {NSDictionary*} headers Optional headers passed with event
*/
- (void)client:(VIClient*)client didReceiveIncomingCall:(VICall*)call video:(BOOL)video headers:(NSDictionary*)headers;
=======
/** 
 Delegate that may be used to handle incoming calls 
 */
@protocol VIClientCallManagerDelegate <NSObject>

/**
 Triggered when there is a new incoming call to current user.
 
 @param client  <VIClient> instance
 @param call    <VICall> instance
 @param video   True if incoming call offers video, false otherwise
 @param headers Optional headers passed with event
 */
- (void)client:(VIClient*)client didReceiveIncomingCall:(VICall*)call withIncomingVideo:(BOOL)video headers:(NSDictionary*)headers;
>>>>>>> feature/ios-2.7.0

@end

@interface VIClient(CallManager)

/**
CallManager delegate that handles incoming calls.
@property callManagerDelegate
@type {id<VIClientCallManagerDelegate>}
*/
@property (nonatomic, weak) id<VIClientCallManagerDelegate> callManagerDelegate;

/**
<<<<<<< HEAD
Dictionary of actual calls with their ids.
@property calls
@type {NSDictionary<NSString*,VICall*>*}
@readonly
*/
@property (nonatomic,strong,readonly) NSDictionary<NSString*,VICall*>*  calls; // callId to call dictionary

/**
Create new call instance. Call must be then started using startCall
@method callToUser:customData:
@param {NSString*} user SIP URI, username or phone number to make call to. Actual routing is then performed by VoxEngine scenario
@param {NSString*} Optional custom data passed with call. Will be available in VoxEngine senario
@return {NSString*} Pointer to VICall instance
*/
- (VICall*)callToUser:(NSString*)user customData:(NSString*)customData;
=======
 Dictionary of actual calls with their ids.
 */
@property (nonatomic,strong,readonly) NSDictionary<NSString*, VICall*>*  calls;

/**
 Create new call instance. Call must be then started using startCall
 
 @param user         SIP URI, username or phone number to make call to. Actual routing is then performed by VoxEngine scenario
 @param sendVideo    Specify if video send is enabled for a call
 @param receiveVideo Specify if video receive is enabled for a call
 @param customData   Custom data passed with call. Will be available in VoxEngine scenario
 @return Pointer to <VICall> instance
 */
- (VICall*)callToUser:(NSString*)user withSendVideo:(BOOL)sendVideo receiveVideo:(BOOL)receiveVideo customData:(NSString*)customData;
>>>>>>> feature/ios-2.7.0

@end

@interface VIClient(Push)

/**
<<<<<<< HEAD
Register Apple Push Notifications token, after calling this function, application will receive push notifications from Voximplant Server
@method registerPushNotificationsToken:
@param {NSData *} token The APNS token which comes from:
 - (void)pushRegistry:(PKPushRegistry *)registry didUpdatePushCredentials:(PKPushCredentials *)credentials forType:(PKPushType)type;
*/
- (void)registerPushNotificationsToken:(NSData *)token;

/**
Unregister Apple Push Notifications token, after calling this function, application stops receive push notifications from Voximplant Server
@method unregisterPushNotificationsToken:
@param {NSData *} token The APNS token which comes from:
 - (void)pushRegistry:(PKPushRegistry *)registry didUpdatePushCredentials:(PKPushCredentials *)credentials forType:(PKPushType)type;
 credentials.token
*/
- (void)unregisterPushNotificationsToken:(NSData *)token;

/**
Handle incoming push notification
@method handlePushNotification:
@param {NSDictionary *} notification The incomming notification which comes from:
 - (void)pushRegistry:(PKPushRegistry *)registry didReceiveIncomingPushWithPayload:(PKPushPayload *)payload forType:(PKPushType)type {
 payload.dictionaryPayload
*/
=======
 Register Apple Push Notifications token. 
 After calling this function application will receive push notifications from Voximplant Server.
 
 @param voipToken The APNS token for VoIP push notifications which comes from:
 
     - (void)pushRegistry:(PKPushRegistry *)registry didUpdatePushCredentials:(PKPushCredentials *)credentials forType:(PKPushType)type;
 
 @param imToken The APNS token for IM push notifications
 */
- (void)registerPushNotificationsToken:(NSData *)voipToken imToken:(NSData*)imToken;

/**
 Unregister Apple Push Notifications token. 
 After calling this function application stops receive push notifications from Voximplant Server
 
 @param voipToken The APNS token for VoIP push notifications which comes from:
 
     - (void)pushRegistry:(PKPushRegistry *)registry didUpdatePushCredentials:(PKPushCredentials *)credentials forType:(PKPushType)type;

 @param imToken The APNS token for IM push notification
 */
- (void)unregisterPushNotificationsToken:(NSData *)voipToken imToken:(NSData*)imToken;

/**
 Handle incoming push notification
 
 @param notification The incomming notification which comes from:
 
     - (void)pushRegistry:(PKPushRegistry *)registry didReceiveIncomingPushWithPayload:(PKPushPayload *)payload forType:(PKPushType)type
 
 */
>>>>>>> feature/ios-2.7.0
- (void)handlePushNotification:(NSDictionary *)notification;

@end
