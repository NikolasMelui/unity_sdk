//
//  VICallStat.h
//  Pods
//
//  Created by Andrey Syvrachev (asyvrachev@zingaya.com) on 18.04.17.
//  Copyright Â© 2017 VoxImplant (www.voximplant.com). All rights reserved.
//

#import <Foundation/Foundation.h>
#import <CoreGraphics/CoreGraphics.h>

<<<<<<< HEAD
/*
 warning, this Statistics API is not final right now, it may be changed in future releases
*/

typedef NS_ENUM(NSUInteger,VIStreamDirection){
=======
/**
 Enum of supported audio/video stream directions
 */
typedef NS_ENUM(NSUInteger, VIStreamDirection) {
    /** Stream is directed from this SDK toward the Voximplant cloud or toward another SDK in Peer-to-Peer mode */
>>>>>>> feature/ios-2.7.0
    VIStreamDirectionSend,
    VIStreamDirectionRecv
};

typedef NS_ENUM(NSUInteger,VIStreamType){
    VIStreamTypeUnknown,
    VIStreamTypeAudio,
    VIStreamTypeVideo
};

@class RTCLegacyStatsReport;
<<<<<<< HEAD
@interface VIStreamStat : NSObject

=======

/** Stream statistics */
@interface VIStreamStat : NSObject

/**
 Unique stream id as a string, same as "streamId" for <VIVideoStream>
 */
>>>>>>> feature/ios-2.7.0
@property(nonatomic,copy,readonly)   NSString* streamId;
@property(nonatomic,copy,readonly)   NSString* codec;

<<<<<<< HEAD
=======
/**
 Stream direction: VIStreamDirectionSend for streams directed from this device,
 VIStreamDirectionRecv for streams directed to this device
 */
>>>>>>> feature/ios-2.7.0
@property(nonatomic,assign,readonly) VIStreamDirection dir;
@property(nonatomic,assign,readonly) VIStreamType type;

<<<<<<< HEAD
@property(nonatomic,assign,readonly) NSInteger bytes;
=======
/**
 Number of bytes transferred through stream
 */
@property(nonatomic,assign,readonly) NSInteger bytes;

/**
 Number of packets transferred through stream
 */
>>>>>>> feature/ios-2.7.0
@property(nonatomic,assign,readonly) NSInteger packets;
@property(nonatomic,assign,readonly) NSInteger packetsLost;
@property(nonatomic,assign,readonly) NSInteger packetLossPercents;
@property(nonatomic,assign,readonly) NSInteger packetLossCurrentPercents;

// receive only statistics, for transmit streams always zero
@property(nonatomic,assign,readonly) NSInteger jitterMs;
@property(nonatomic,assign,readonly) NSInteger jitterBufferMs;

// only for video streams, for audio streams always zero
@property(nonatomic,assign,readonly) CGSize    videoFrame;
@property(nonatomic,assign,readonly) NSInteger videoFps;

@end

<<<<<<< HEAD

=======
/** Video statistics */
>>>>>>> feature/ios-2.7.0
@interface VIVideoStat: NSObject

@property(nonatomic,assign,readonly) NSInteger retransmitBitrate;
@property(nonatomic,assign,readonly) NSInteger transmitBitrate;
@property(nonatomic,assign,readonly) NSInteger availableSendBandwidth;

@end

<<<<<<< HEAD
@interface VIEndPointStat : NSObject
=======
/** Endpoint statistics */
@interface VIEndpointStat : NSObject
>>>>>>> feature/ios-2.7.0

@property(nonatomic,strong,readonly) NSArray<VIStreamStat*> *remoteStreams; // only remote recv streams

@end

<<<<<<< HEAD

=======
/** Call staticstics */
>>>>>>> feature/ios-2.7.0
@interface VICallStat : NSObject

// common video stat
@property(nonatomic,strong,readonly) VIVideoStat* video;

@property(nonatomic,strong,readonly) NSArray<VIEndPointStat*> *endPoints; // remote EndPoints

@property(nonatomic,strong,readonly) NSArray<VIStreamStat*> *localStreams; // only local sendStreams
@property(nonatomic,strong,readonly) NSArray<VIStreamStat*> *streams; // all streams audio-send,audio-recv,video-send,video-recv in one array for convinience

// original webrtc statistical reports
@property(nonatomic,strong,readonly) NSArray<RTCLegacyStatsReport *> *webrtcOriginalReports;

@end
