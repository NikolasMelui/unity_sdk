//
//  VIClient.h
//  VoxImplant
//
//  Created by Andrey Syvrachev (asyvrachev@zingaya.com) on 07.12.16.
//  Copyright Â© 2017 Zingaya. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <CoreGraphics/CoreGraphics.h>

@class VIClient;
@class VICall;
@class VIMessenger;

/** Log level */
typedef NS_ENUM(NSUInteger, VILogLevel) {
    /** Log verbosity level to disable logs. */
    VILogLevelDisabled,
    /** Log verbosity level to include only error messages. */
    VILogLevelError,
    /** Log verbosity level to include warnings messages. */
    VILogLevelWarning,
    /** Log verbosity level to include info messages. */
    VILogLevelInfo,
    /** Log verbosity level to include debug messages. */
    VILogLevelDebug,
    /** Log verbosity level to include verbose messages. */
    VILogLevelVerbose,
    /** Log verbosity level to include all types of messages. */
    VILogLevelMax
};

/** Interface that may be used to connect and login to VoxImplant Cloud, make and receive audio/video calls. */
@interface VIClient : NSObject

/**
 Get client version
 
 @return Client version
 */
+ (NSString*)clientVersion;

/**
 Set a verbosity level for log messages. This method must be called before creating SDK object instance.
 
 @param logLevel <VILogLevel> log verbosity level
 */
+ (void)setLogLevel:(VILogLevel)logLevel;

/**
 Enable saving of the logs to file. Log files located at: Library/Caches/Logs
 This method must be called before creating SDK object instance.
 */
+(void) saveLogToFileEnable;

/**
 @warning NS_UNAVAILABLE
 */
-(instancetype)init NS_UNAVAILABLE;

/**
 Initialize VIClient instance
 
 @param queue All delegates methods will be called in this queue. Queue should be serial, but not concurrent (main queue is applicable).
 */
- (instancetype)initWithDelegateQueue:(dispatch_queue_t)queue;

/**
 Get instance of messaging subsystem.
 */
@property(nonatomic,strong,readonly) VIMessenger *messenger;

@end

/**
 Delegate that may be used to handle events for connection with VoxImplant Cloud. 
 */
@protocol VIClientSessionDelegate <NSObject>

/**
 Triggered after connection to VoxImplant Cloud was established successfully.
 
 @param client <VIClient> instance
 */
- (void)clientSessionDidConnect:(VIClient*)client;

/**
 Triggered if connection to VoxImplant Cloud was closed
 
 @param client <VIClient> instance
 */
- (void)clientSessionDidDisconnect:(VIClient*)client;

/**
 Triggered if connection to VoxImplant Cloud couldn't be established
 
 @param client <VIClient> instance
 @param error  Error description
 */
- (void)client:(VIClient*)client sessionDidFailConnectWithError:(NSError*)error;

@end

@interface VIClient(Session)

/**
 Session delegate that handles events for connection with VoxImplant Cloud.
 */
@property (nonatomic, weak) id<VIClientSessionDelegate> sessionDelegate;

/**
 Connect to VoxImplant cloud
 */
- (void)connect;

/**
 Connect to VoxImplant cloud.
 
 @param connectivityCheck Checks whether UDP traffic will flow correctly between device and VoxImplant cloud. This check reduces connection speed.
 @param gateways          Array of server names of particular media gateways for connection
 */
- (void)connectWithConnectivityCheck:(BOOL)connectivityCheck gateways:(NSArray*)gateways;

/**
 Disconnect from VoxImplant cloud
 */
- (void)disconnect;

@end


/**
 Completion handler, triggered when login operation is completed successfully.
 
 @param displayName Display name of logged in user
 @param authParams  Auth parameters that can be used to login using access token.
 */
typedef void (^VILoginSuccess)(NSString * displayName, NSDictionary* authParams);

/**
 Completion handler, triggered when login process failed.
 
 @param error Error description
 */
typedef void (^VILoginFailure)(NSError* error);

/**
 Completion handler, triggered when one time key generated by the login server.
 
 @param oneTimeKey One time key
 */
typedef void (^VIOneTimeKeyResult)(NSString* oneTimeKey);

/**
 Completion handler, triggered when refresh of login tokens completed.
 
 @param error      Error if operation failed, nil otherwise
 @param authParams Auth parameters that can be used to login using access token
 */
typedef void (^VIRefreshTokenResult)(NSError *error, NSDictionary* authParams);


@interface VIClient(Login)

/**
 Login to VoxImplant cloud using password.
 
 @param user     Full user name, including app and account name, like _someuser@someapp.youraccount.voximplant.com_
 @param password User password
 @param success  <VILoginSuccess> completion handler triggered if operation is completed successfully
 @param failure  <VILoginFailure> completion handler failure triggered if operation is failed
 */
- (void)loginWithUser:(NSString*)user
             password:(NSString*)password
              success:(VILoginSuccess)success
              failure:(VILoginFailure)failure;

/**
 Login to VoxImplant cloud using access token.
 
 @param user    Full user name, including app and account name, like _someuser@someapp.youraccount.voximplant.com_
 @param token   Access token obtained from authParams
 @param success <VILoginSuccess> completion handler triggered if operation is completed successfully
 @param failure <VILoginFailure> completion handler failure triggered if operation is failed
 */
- (void)loginWithUser:(NSString*)user
                token:(NSString*)token
              success:(VILoginSuccess)success
              failure:(VILoginFailure)failure;

/**
 Login to VoxImplant cloud using one time key.
 
 @param user       Full user name, including app and account name, like _someuser@someapp.youraccount.voximplant.com_
 @param oneTimeKey Hash that was generated using following formula: 
 
     MD5(oneTimeKey+"|"+MD5(user+":voximplant.com:"+password))
 
 **Please note that here user is just a user name, without app name, account name or anything else after "@".**
 So if you pass _myuser@myapp.myacc.voximplant.com_ as a *username*, you should only use _myuser_ while computing this hash
 
 @param success    <VILoginSuccess> completion handler triggered if operation is completed successfully
 @param failure    <VILoginFailure> completion handler failure triggered if operation is failed
 */
- (void)loginWithUser:(NSString*)user
           oneTimeKey:(NSString*)oneTimeKey
              success:(VILoginSuccess)success
              failure:(VILoginFailure)failure;

/**
 Perform refresh of login tokens required for login using access token
 
 @param user   Full user name, including app and account name, like _someuser@someapp.youraccount.voximplant.com_
 @param token  Refresh token obtained from authParams
 @param result <VIRefreshTokenResult> completion handler that is triggered when the operation is completed
 */
- (void)refreshTokenWithUser:(NSString *)user token:(NSString*)token result:(VIRefreshTokenResult)result;

/**
 Generates one time login key to be used for automated login process.
 
 @param user   Full user name, including app and account name, like _someuser@someapp.youraccount.voximplant.com_
 @param result <VIOneTimeKeyResult> completion handler that is triggered when the operation is completed
 @see -loginWithUser:oneTimeKey:success:failure:
 @see [Information about automated login on VoxImplant website](http://voximplant.com/docs/quickstart/24/automated-login/)
 */
- (void)requestOneTimeKeyWithUser:(NSString *)user result:(VIOneTimeKeyResult)result;

@end

/** 
 Delegate that may be used to handle incoming calls 
 */
@protocol VIClientCallManagerDelegate <NSObject>

/**
 Triggered when there is a new incoming call to current user.
 
 @param client  <VIClient> instance
 @param call    <VICall> instance
 @param video   True if incoming call offers video, false otherwise
 @param headers Optional headers passed with event
 */
- (void)client:(VIClient*)client didReceiveIncomingCall:(VICall*)call withIncomingVideo:(BOOL)video headers:(NSDictionary*)headers;

@end

@interface VIClient(CallManager)

/**
 CallManager delegate that handles incoming calls.
 */
@property (nonatomic, weak) id<VIClientCallManagerDelegate> callManagerDelegate;

/**
 Dictionary of actual calls with their ids.
 */
@property (nonatomic,strong,readonly) NSDictionary<NSString*, VICall*>*  calls;

/**
 Create new call instance. Call must be then started using startCall
 
 @param user         SIP URI, username or phone number to make call to. Actual routing is then performed by VoxEngine scenario
 @param sendVideo    Specify if video send is enabled for a call
 @param receiveVideo Specify if video receive is enabled for a call
 @param customData   Custom data passed with call. Will be available in VoxEngine scenario
 @return Pointer to <VICall> instance
 */
- (VICall*)callToUser:(NSString*)user withSendVideo:(BOOL)sendVideo receiveVideo:(BOOL)receiveVideo customData:(NSString*)customData;

@end

@interface VIClient(Push)
/**
 Register Apple Push Notifications token. 
 After calling this function application will receive push notifications from Voximplant Server.
 
 @param voipToken The APNS token for VoIP push notifications which comes from:
 
     - (void)pushRegistry:(PKPushRegistry *)registry didUpdatePushCredentials:(PKPushCredentials *)credentials forType:(PKPushType)type;
 
 @param imToken The APNS token for IM push notifications
 */
- (void)registerPushNotificationsToken:(NSData *)voipToken imToken:(NSData*)imToken;

/**
 Unregister Apple Push Notifications token. 
 After calling this function application stops receive push notifications from Voximplant Server
 
 @param voipToken The APNS token for VoIP push notifications which comes from:
 
     - (void)pushRegistry:(PKPushRegistry *)registry didUpdatePushCredentials:(PKPushCredentials *)credentials forType:(PKPushType)type;

 @param imToken The APNS token for IM push notification
 */
- (void)unregisterPushNotificationsToken:(NSData *)voipToken imToken:(NSData*)imToken;

/**
 Handle incoming push notification
 
 @param notification The incomming notification which comes from:
 
     - (void)pushRegistry:(PKPushRegistry *)registry didReceiveIncomingPushWithPayload:(PKPushPayload *)payload forType:(PKPushType)type
 
 */
- (void)handlePushNotification:(NSDictionary *)notification;

@end
